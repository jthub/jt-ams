swagger: '2.0'
info:
  title: JTHub Account Management Service API (primilinary, subject to changes)
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
#security:
  # enable OAuth protection for all REST endpoints
  # (only active if the TOKENINFO_URL environment variable is set)
#  - oauth2: [uid]
paths:
# TODO: new endpoints
#  /users:
#    get:
#    post:
#  /users/{user_name}:
#    get:
#    put:
#    delete:
#  /users/{user_name}/orgs:
#    get:
#  /orgs:
#    get:
#    post:
#  /orgs/{org_name}:
#    get:
#    put:
#    delete:
#  /orgs/{org_name}/owners:
#    get:
#    post:
#  /orgs/{org_name}/owners/{user_name}:
#    get:
#    delete:
#  /orgs/{org_name}/members:
#    get:
#    post:
#  /orgs/{org_name}/members/{user_name}:
#    get:
#    delete:
#  /orgs/{org_name}/collaborators:
#    get:
#    post:
#  /orgs/{org_name}/collaborators/{user_name}:
#    get:
#    delete:
#  /orgs/{org_name}/teams/{team_name}/members:
#    get:
#    post:
#  /orgs/{org_name}/teams/{team_name}/members/{user_name}:
#    get:
#    put:  # edit role etc, could be
#    delete:

  /accounts/_id/{account_id}:
    get:
      tags: [Accounts]
      operationId: app.get_account_by_id
      summary: Get account by unique ID
      parameters:
        - $ref: '#/parameters/account_id'
      responses:
        200:
          description: Return account
          schema:
            $ref: '#/definitions/Account'
  /accounts:
    get:
      tags: [Accounts]
      operationId: app.get_accounts
      summary: Get all accounts (not implemented yet)
      parameters:
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 100
        - name: offset
          in: query
          type: integer
          minimum: 0
          default: 0
      responses:
        200:
          description: Return accounts
          schema:
            type: array
    post:
      tags: [Accounts]
      operationId: app.create_account
      summary: Create an account
      parameters:
        - name: account
          description: Account type is an organization (org) or individual (user)
          in: body
          schema:
            $ref: '#/definitions/Account'
      responses:
        200:
          description: Account created
          schema:
            $ref: '#/definitions/Account'
        409:
          description: Account with specified name already exists
  /accounts/{account_name}:
    get:
      tags: [Accounts]
      operationId: app.get_account
      summary: Get a single account
      parameters:
        - $ref: '#/parameters/account_name'
      responses:
        200:
          description: Return account
          schema:
            $ref: '#/definitions/Account'
        404:
          description: Account does not exist
    put:
      tags: [Accounts]
      operationId: app.update_account
      summary: Update an account (not implemented yet)
      parameters:
        - $ref: '#/parameters/account_name'
        - name: account
          in: body
          schema:
            $ref: '#/definitions/Account'
      responses:
        200:
          description: Account updated
    delete:
      tags: [Accounts]
      operationId: app.delete_account
      summary: Remove an account (not implemented yet)
      parameters:
        - $ref: '#/parameters/account_name'
      responses:
        204:
          description: Account was deleted
        404:
          description: Account does not exist
  /accounts/{account_name}/_members/{member_name}:
    get:
      tags: [Organizations]
      operationId: app.get_member
      summary: Verify oragnization membership on a given member account (not implemented yet)
      parameters:
        - $ref: '#/parameters/account_name'
        - $ref: '#/parameters/member_name'
      responses:
        200:
          description: Return member name and ID
        404:
          description: Member does not exist
    put:
      tags: [Organizations]
      operationId: app.add_member
      summary: Add a member to an oragnization account (not implemented yet)
      parameters:
        - $ref: '#/parameters/account_name'
        - $ref: '#/parameters/member_name'
      responses:
        200:
          description: Return member name and ID when member added
        204:
          description: Member already in the organization
        404:
          description: Member does not exist
    delete:
      tags: [Organizations]
      operationId: app.delete_member
      summary: Remove a member from an oragnization account (not implemented yet)
      parameters:
        - $ref: '#/parameters/account_name'
        - $ref: '#/parameters/member_name'
      responses:
        204:
          description: Member deleted from the organization
        404:
          description: Member does not exist


parameters:
  account_name:
    name: account_name
    description: Account's unique name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
  account_id:
    name: account_id
    description: Account's unique ID
    in: path
    type: string
    required: true
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  member_name:
    name: member_name
    description: Member's account nanme
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"


definitions:
  Account:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Account's name
        pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
        example: "junjun-zhang"
        minLength: 3
        maxLength: 30
      account_type:
        type: string
        description: Account type
        enum: ["org", "user"]
      tags:
        type: object
        description: Custom tags


securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
